# Generated by Django 4.2.15 on 2025-06-14 21:20

from django.db import migrations


def check_and_delete_models_and_fields(apps, schema_editor):
    """
    Função personalizada para verificar se as tabelas e colunas existem antes de tentar modificá-las
    """
    db_alias = schema_editor.connection.alias
    
    # Lista de tabelas para verificar
    tables_to_check = [
        'projects_annotationruletype',
        'projects_optionquestion', 
        'projects_optionsgroup'
    ]
    
    # Lista de colunas para verificar e remover
    columns_to_check = [
        ('projects_annotationrule', 'description'),
        ('projects_answer', 'answer_option'),
        ('projects_question', 'options_group')
    ]
    
    with schema_editor.connection.cursor() as cursor:
        # Verificar e apagar tabelas que existem
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = ANY(%s)
        """, [tables_to_check])
        
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        for table in existing_tables:
            cursor.execute(f'DROP TABLE IF EXISTS "{table}" CASCADE')
            print(f"Dropped table: {table}")
        
        # Verificar e remover colunas que existem
        for table_name, column_name in columns_to_check:
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name = %s 
                AND column_name = %s
            """, [table_name, column_name])
            
            if cursor.fetchone():
                try:
                    cursor.execute(f'ALTER TABLE "{table_name}" DROP COLUMN IF EXISTS "{column_name}" CASCADE')
                    print(f"Dropped column: {table_name}.{column_name}")
                except Exception as e:
                    print(f"Error dropping column {table_name}.{column_name}: {e}")


def reverse_check_and_delete_models_and_fields(apps, schema_editor):
    """
    Função reversa - não fazemos nada porque não conseguimos recriar as tabelas/colunas
    sem conhecer a estrutura original
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0022_delete_annotationruletype_and_more"),
    ]

    operations = [
        migrations.RunPython(
            check_and_delete_models_and_fields,
            reverse_check_and_delete_models_and_fields,
        ),
    ]
